{"name":"Restmodelgenerator","tagline":"You can use this tool to define a rest model and generate source code for various languages.","body":"RestModelGenerator\r\n==================\r\n\r\nThis tool is intended for developers of REST applications. It will generate simple objects that can represend the json or xml your rest interface accepts. This tool is not limited to rest, it is intended to generate data type objects for any purpose.\r\n\r\nA simple syntax is used to define your objects. Once you have created these model definition files you can generate your code as required.\r\n\r\nCurrently supported languages are:\r\n\r\n+ Java\r\n+ Ruby\r\n\r\nGet started fast! Replace the example model files in the `models` directory with some of your own then run `generate.bat` on windows or `generate.sh` on linux and osx. \r\n\r\nCreating model files\r\n--------------------\r\n\r\nFile names must be in the following format `\"<class name>.model\"`. Example: `myClass.model`\r\n\r\nAll line endings are denoted by a semicolumn and all white spaces in files are ignored.\r\n\r\nThe first entry in the file should be the output directory or package for the file, folders delimeted by forward slash. \r\n\r\nExample:\r\n```\r\ntest/output/dir;\r\n```\r\n\r\nAfter the folder output line the class body declration can begin. The class body is encapsulated by curly brackets. You declear each variable and variable type of the class within the body. Varaible names must be in lower camel case.\r\n\r\nVariable name off member variables are declared first, followed by a column then the type and then a semicolumn to denote the end of line `\"<variable name>:<type>;\"`.\r\n\r\nExample:\r\n```\r\ntestVar:String;\r\n```\r\n\r\nA List is declared the same as normal variables (as if the list was the type) but the type of objects in the list is denoted following the type. `\"<variable name>:List:<type>;\"`\r\n\r\nExample:\r\n```\r\ntestList:List:String;\r\n```\r\n\r\nThe following types plus your defined objects are currently supported:\r\n```\r\n<var name>:String;\r\n<var name>:Integer;\r\n<var name>:Float;\r\n<var name>:Boolean;\r\n<var name>:Date;\r\n<var name>:List:<list type>;\r\n```\r\n\r\nModel file example\r\n----------------------\r\nFilename: `test.model`\r\n```html\r\ncom/model/test;\r\n{\r\n    id:Integer;\r\n    name:String;\r\n\r\n}\r\n```\r\n\r\nThis would generate the following\r\n\r\nJava:\r\n```java\r\npackage com.model.test;\r\n\r\npublic class Test {\r\n   private Integer id;\r\n   private String name;\r\n   \r\n   public Integer getId(){\r\n      return this.id;\r\n   }\r\n   \r\n   public void setId(String id){\r\n      this.id = id;\r\n   }\r\n   \r\n   public String getName(){\r\n      return this.name;\r\n   }\r\n   \r\n   public void setName(String name){\r\n      this.name = name;\r\n   }\r\n}\r\n```\r\n\r\nRuby:\r\n```ruby\r\n module Com \r\n module Model \r\n module Test \r\n\r\n    class Test\r\n       attr_accessor :id, :name\r\n    end\r\n end\r\n end\r\n end\r\n```\r\nReplacing Templates\r\n--------------------\r\nIf you look at the source code in `CodeGeneration/src/main/resources/templates` you will find the templates used to generate the code. You can copy these files change them as you see fit then place them in the directory you are running the project in the subfolder templates.\r\n\r\nFeature Development\r\n---------------------\r\nThere are allot more features to some to RestModelGenerator so if there is something think needs adding or want to help out let me know beachy.greg@gmail.com!\r\n\r\nFeatures still to be developed\r\n+ C# language generation.\r\n+ Add support for Map type.\r\n+ Add adders to pojo's for lists.\r\n+ Add annotations or something to mode file syntax for more flexability in language generation.\r\n+ Allow model files to extend other mode files (note not for class extension). \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}